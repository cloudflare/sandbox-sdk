name: Pull Request

on:
  pull_request:
  push:
    branches:
      - refactor-with-tests

jobs:
  # Fast quality checks
  quality-checks:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - uses: actions/setup-node@v4
        with:
          node-version: 24
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build packages
        run: npm run build

      - name: Type checking
        run: npm run typecheck

      - name: Linting
        run: npm run check

  # Unit tests (client + container)
  unit-tests:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    needs: quality-checks
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 24
          cache: "npm"

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: npm ci

      - name: Build packages
        run: npm run build

      - name: Run all unit tests
        run: |
          # Run tests with timeout to work around vitest-pool-workers shutdown hang
          # Tests complete in ~5s, but workerd shutdown can hang for 6+ minutes in CI
          set +e  # Don't exit on error
          timeout --preserve-status 45 npm test > test_output.log 2>&1
          EXIT_CODE=$?
          cat test_output.log

          # Check if tests passed by looking for success indicators in output
          if grep -q "Test Files.*passed" test_output.log && grep -q "Tests.*passed" test_output.log; then
            echo "✅ Tests passed successfully"
            # Exit code 124 means timeout, which is expected due to workerd shutdown hang
            if [ $EXIT_CODE -eq 124 ] || [ $EXIT_CODE -eq 143 ]; then
              echo "::warning::Vitest was killed due to workerd shutdown hang (known issue), but tests passed"
              exit 0
            fi
            exit 0
          else
            echo "❌ Tests failed or did not complete"
            exit 1
          fi

  # E2E tests against deployed worker
  e2e-tests:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 24
          cache: "npm"

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: npm ci

      - name: Build packages
        run: npm run build

      # Set environment name (pr-X for PRs, branch name for pushes)
      - name: Set environment name
        id: env-name
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "env_name=pr-${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
            echo "worker_name=sandbox-e2e-test-worker-pr-${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          else
            echo "env_name=${{ github.ref_name }}" >> $GITHUB_OUTPUT
            echo "worker_name=sandbox-e2e-test-worker-${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

      # Deploy test worker using official Cloudflare action
      - name: Deploy test worker
        id: deploy
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy --env ${{ steps.env-name.outputs.env_name }}
          workingDirectory: tests/e2e/test-worker

      # The wrangler-action doesn't provide URL output, so we fetch it
      - name: Get deployment URL
        id: get-url
        run: |
          URL=$(npx wrangler deployments list --env ${{ steps.env-name.outputs.env_name }} --format json | jq -r '.[0].url')
          echo "worker_url=$URL" >> $GITHUB_OUTPUT
        working-directory: tests/e2e/test-worker
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      # Run E2E tests against deployed worker
      - name: Run E2E tests
        run: npm run test:e2e
        env:
          TEST_WORKER_URL: ${{ steps.get-url.outputs.worker_url }}
          CI: true

      # Cleanup: Delete test worker deployment (only for PR environments)
      - name: Cleanup test deployment
        if: always() && github.event_name == 'pull_request'
        continue-on-error: true
        run: |
          npx wrangler delete --name ${{ steps.env-name.outputs.worker_name }} || echo "Worker already deleted or doesn't exist"
        working-directory: tests/e2e/test-worker
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
